#!/usr/bin/env python3
"""
Script to initialize the ChromaDB database with sample data
"""

import os
import sys
from pathlib import Path

# Add the project root directory to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from app.models import ChromaDBManager, DocumentProcessor
from config import Config

def initialize_database():
    """Initialize ChromaDB with sample data"""
    print("üöÄ Initializing Travel AI Assistant Database...")
    
    try:
        # Create data directory if it doesn't exist
        os.makedirs(Config.CHROMADB_PATH, exist_ok=True)
        
        # Initialize managers
        db_manager = ChromaDBManager()
        doc_processor = DocumentProcessor()
        
        print("‚úÖ ChromaDB connection established")
        
        # Process sample data file
        sample_file = project_root / "data" / "sample_travel_data.txt"
        
        if sample_file.exists():
            print(f"üìÑ Processing sample data from {sample_file}")
            
            # Process the text file
            chunks = doc_processor.process_text_file(str(sample_file))
            
            if chunks:
                print(f"üì¶ Created {len(chunks)} text chunks")
                
                # Create metadata for chunks
                metadatas = [
                    {
                        'source': 'sample_travel_data.txt',
                        'chunk_id': i,
                        'content_type': 'travel_info'
                    }
                    for i in range(len(chunks))
                ]
                
                # Add to database
                success = db_manager.add_documents(chunks, metadatas)
                
                if success:
                    print("‚úÖ Sample data added to ChromaDB successfully!")
                else:
                    print("‚ùå Failed to add sample data to ChromaDB")
                    return False
            else:
                print("‚ùå No chunks generated from sample file")
                return False
        else:
            print(f"‚ö†Ô∏è Sample data file not found at {sample_file}")
            print("üìù Creating basic welcome message...")
            
            # Create a basic welcome message
            welcome_chunks = [
                "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Tr·ª£ l√Ω Du l·ªãch AI! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c ƒë·ªãa ƒëi·ªÉm du l·ªãch v√† m√≥n ƒÉn ngon t·∫°i Vi·ªát Nam.",
                "B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√°c th√†nh ph·ªë nh∆∞ H√† N·ªôi, H·ªì Ch√≠ Minh, ƒê√† N·∫µng, H·ªôi An, Hu·∫ø, ƒê√† L·∫°t v√† nhi·ªÅu ƒë·ªãa ƒëi·ªÉm kh√°c.",
                "T√¥i c≈©ng c√≥ th·ªÉ gi·ªõi thi·ªáu v·ªÅ c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n nh∆∞ ph·ªü, b√∫n ch·∫£, b√°nh m√¨, c∆°m t·∫•m, b√°nh cu·ªën v√† nhi·ªÅu m√≥n ngon kh√°c."
            ]
            
            metadatas = [
                {
                    'source': 'system_init',
                    'chunk_id': i,
                    'content_type': 'welcome_message'
                }
                for i in range(len(welcome_chunks))
            ]
            
            success = db_manager.add_documents(welcome_chunks, metadatas)
            
            if success:
                print("‚úÖ Basic welcome messages added to ChromaDB!")
            else:
                print("‚ùå Failed to add welcome messages to ChromaDB")
                return False
        
        # Test query
        print("üîç Testing database query...")
        results = db_manager.query_documents("H·ªì G∆∞∆°m", n_results=2)
        
        if results and results.get("documents"):
            print(f"‚úÖ Query test successful! Found {len(results['documents'][0])} relevant documents")
        else:
            print("‚ö†Ô∏è Query test returned no results, but database is initialized")
        
        print("\nüéâ Database initialization completed successfully!")
        print("\nüìã Next steps:")
        print("1. Make sure your .env file is configured with API keys")
        print("2. Run: python app.py")
        print("3. Visit: http://localhost:5000")
        print("4. Upload more documents via admin panel at: http://localhost:5000/admin")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error during database initialization: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = initialize_database()
    sys.exit(0 if success else 1)
